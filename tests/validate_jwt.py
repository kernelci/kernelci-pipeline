#!/usr/bin/env python3
"""
Validate a JWT generated by jwt_generator.py.
This script uses the tool, generate jwt, then decodes the JWT and verifies its signature using a secret key.
"""
import jwt
import sys
import argparse
import subprocess

def test1():
    secret = "secret"
    email = "test@test.com"
    expected_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwZXJtaXNzaW9ucyI6WyJjaGVja291dCIsInRlc3RyZXRyeSIsInBhdGNoc2V0Il0sImVtYWlsIjoidGVzdEB0ZXN0LmNvbSJ9.aL-yk5WVZKbzhPbN28KhjRONaae_2dGxsknwCXvuIHI"
    result = subprocess.run(
        ["python3", "tools/jwt_generator.py", "--secret", secret, "--email", email],
        capture_output=True,
        text=True
    )
    if result.returncode != 0:
        print("Error generating JWT token:", result.stderr)
        sys.exit(1)
    jwt_token = None
    # iterate over lines
    for line in result.stdout.splitlines():
        if line.startswith("JWT token:"):
            jwt_token = line.strip().split(": ")[1]
            # extract the token from the output
            break
    else:
        print("JWT token not found in output")
        sys.exit(1)
    
    assert jwt_token == expected_token, f"Expected {expected_token}, but got {jwt_token}"

def main():
    test1()
    print("Test 1 passed: JWT token generated successfully.")

if __name__ == "__main__":
    main()
    print("All tests passed.")
