# SPDX-License-Identifier: LGPL-2.1-or-later

# List of report presets
#
# Each item defines a report preset containing a set of search
# parameters and values. The output for the preset will be formatted
# using the template in config/reports/<preset-name>.jinja2

# Each report preset must include a "metadata" section and a "preset"
# section. The "metadata" section is expected to contain at least the
# "template" file used for the summary generation. Other optional fields
# are supported:
#  - "output": name of the file where the output will be stored (in
#    data/output)
#  - "title": title for the report
#
# The "preset" section contains the query definition.

# Inside each preset section, top level blocks define the 'kind' of
# result to search for, ie. test, kbuild, regression.
# The dict of items in each block specifies the query parameters:
#     {query_parameter: value}
# The query parameter may include suffixes like __gt, __lt or __re to
# search for values "greater than", "lesser than" or a regexp text
# match.

# Example, <default-test> preset. Searches for dmesg baseline tests for
# arm64 in two repo trees, and also for all results for tests whose name
# contains "mytest":
#
# default-test:
#   metadata:
#     title: "Example test report"
#     template: "mytemplate.jinja2"
#  preset:
#    test:
#      # Query by group, name, arch and list of repos
#      - group__re: baseline
#        name: dmesg
#        data.arch: arm64
#        repos:
#          - tree: stable-rc
#            branch: linux-5.4.y
#          - tree: stable-rc
#            branch: linux-5.15.y
#          - tree: mytree
#      # Query by name
#      - name_re: mytest


# stable-rc kernel build regressions
stable-rc-build-regressions:
  metadata:
    title: "stable-rc kernel build regressions"
    template: "generic-regressions.html.jinja2"
    output: "stable-rc-build-regressions.html"
  preset:
    regression:
      - name__re: kbuild
        repos:
          - tree: stable-rc

# stable-rc kernel build failures
stable-rc-build-failures:
  metadata:
    title: "stable-rc kernel build failures"
    template: "generic-test-failures.html.jinja2"
    output: "stable-rc-build-failures.html"
  preset:
    test:
      - kind: kbuild
        repos:
          - tree: stable-rc

# stable-rc kernel boot regressions
stable-rc-boot-regressions:
  metadata:
    title: "stable-rc kernel boot regressions"
    template: "generic-regressions.html.jinja2"
    output: "stable-rc-boot-regressions.html"
  preset:
    regression:
      - group__re: baseline
        repos:
          - tree: stable-rc

# stable-rc kernel boot failures
stable-rc-boot-failures:
  metadata:
    title: "stable-rc kernel boot failures"
    template: "generic-test-failures.html.jinja2"
    output: "stable-rc-boot-failures.html"
  preset:
    test:
      - group__re: baseline
        repos:
          - tree: stable-rc

# tast test failures
tast-failures:
  metadata:
    title: "General Tast test failures"
    template: "generic-test-failures.html.jinja2"
    output: "tast-failures.html"
  preset:
    test:
      - group__re: tast
        name__ne: tast
        result: fail

# General regressions (kbuilds and all tests) on mainline and next
# excluding those triggered by runtime errors
mainline-next-regressions:
  metadata:
    title: "Regressions found in mainline and next"
    template: "generic-regressions.html.jinja2"
    output: "mainline-next-regressions.html"
  preset:
    regression:
      - data.error_code: null
        repos:
          - tree: mainline
          - tree: next

# General regressions (kbuilds and all tests) on mainline and next
# triggered by runtime errors
mainline-next-regressions__runtime_errors:
  metadata:
    title: "'Regressions' found in mainline and next due to runtime errors"
    template: "generic-regressions.html.jinja2"
    output: "mainline-next-regressions__runtime_errors.html"
  preset:
    regression:
      - data.error_code__ne: null
        repos:
          - tree: mainline
          - tree: next

# tast tests regressions for x86_64 targets
# Collect only regressions that aren't caused by runtime errors
tast-regressions-x86_64:
  metadata:
    title: "Regressions found on Tast tests for x86_64"
    template: "generic-regressions.html.jinja2"
    output: "tast-regressions-x86_64.html"
  preset:
    regression:
      - group__re: tast
        name__ne: tast
        data.arch: x86_64
        # Get only the regressions from results with no runtime errors
        data.error_code: null

# tast tests regressions for x86_64 targets caused by runtime errors
tast-regressions-x86_64__runtime_errors:
  metadata:
    title: "'Regressions' found on Tast tests for x86_64 due to runtime errors"
    template: "generic-regressions.html.jinja2"
    output: "tast-regressions-x86_64__runtime_errors.html"
  preset:
    regression:
      - group__re: tast
        name__ne: tast
        data.arch: x86_64
        data.error_code__ne: null
