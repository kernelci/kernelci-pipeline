{# -*- mode: Python -*- -#}
{# SPDX-License-Identifier: LGPL-2.1-or-later -#}

{%- extends 'base/python.jinja2' %}

{%- block python_imports %}
{{ super() }}
import json
import subprocess
{%- endblock %}

{%- block python_local_imports %}
{{ super() }}
import kernelci.api.helper
{%- endblock %}

{%- block python_globals %}
{{ super() }}
RESULT_MAP = {
    'PASS': 'pass',
    'FAIL': 'fail',
    'SKIP': None,
}
{% endblock %}

{% block python_job -%}
class Job(BaseJob):
    def _parse_results(self, group):
        node = {
            'name': group['name'],
        }
        child_nodes = []
        for test_case in group.get('test_cases', []):
            child_nodes.append({
                'node': {
                    'name': test_case['name'],
                    'result': RESULT_MAP[test_case['status']],
                },
                'child_nodes': [],
            })
        for sub_group in group.get('sub_groups', []):
            child_nodes.append(self._parse_results(sub_group))
        return {
            'node': node,
            'child_nodes': child_nodes,
        }

    def _run(self, src_path):
        kunit_json = 'kunit.json'

        print("Running KUnit...")
        cmd = f"\
cd {src_path} && \
./tools/testing/kunit/kunit.py run --json={kunit_json} --jobs=$(nproc)"
        kunit_res = subprocess.run(cmd, shell=True).returncode

        # ToDo: send {src_path}/.kunit/test.log as artifact
        # ToDo: send {src_path}/kunit.json as artifact

        kunit_json_path = os.path.join(src_path, kunit_json)
        print(f"Parsing results from {kunit_json_path}")
        with open(kunit_json_path) as results_json:
            results_raw = json.load(results_json)
        results = self._parse_results(results_raw)
        results['node']['result'] = 'fail' if kunit_res else 'pass'
        results_path = os.path.join(src_path, 'results.json')
        print(f"Saving results file {results_path}")
        with open(os.path.join(src_path, 'results.json'), 'w') as results_file:
            json.dump(results, results_file, indent='  ')

        return results

    def _submit(self, results, node_id, api):
        # Ensure top-level name is kept the same
        node = api.get_node(node_id)
        results['node']['name'] = node['name']
        api_helper = kernelci.api.helper.APIHelper(api)
        api_helper.submit_results(results, node)
        return node
{% endblock %}
