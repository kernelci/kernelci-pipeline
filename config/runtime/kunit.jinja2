{# -*- mode: Python -*- -#}
{# SPDX-License-Identifier: LGPL-2.1-or-later -#}

{%- extends 'base/python.jinja2' %}

{%- block python_imports %}
{{ super() }}
import json
import subprocess
{%- endblock %}

{%- block python_local_imports %}
{{ super() }}
import kernelci.api.helper
import kernelci.runtime
{%- endblock %}

{%- block python_globals %}
{{ super() }}
RESULT_MAP = {
    'PASS': 'pass',
    'FAIL': 'fail',
    'SKIP': 'skip',
}
ARCH = '{{ arch }}'
{% endblock %}

{% block python_job -%}
class Job(BaseJob):
    def _parse_results(self, group):
        node = {
            'name': group['name'],
        }
        child_nodes = []
        for test_case in group.get('test_cases', []):
            child_nodes.append({
                'node': {
                    'name': test_case['name'],
                    'result': RESULT_MAP[test_case['status']],
                    'kind': 'test'
                },
                'child_nodes': [],
            })
        for sub_group in group.get('sub_groups', []):
            child_nodes.append(self._parse_results(sub_group))

        node['kind'] = 'job' if child_nodes else 'test'
        if node['kind'] == 'job':
            node['result'] = kernelci.runtime.evaluate_test_suite_result(child_nodes)

        return {
            'node': node,
            'child_nodes': child_nodes,
        }

    def _parse_exec_results(self, kunit_json_path):
        print(f"Parsing results from {kunit_json_path}")
        with open(kunit_json_path, encoding='utf-8') as results_json:
            results_raw = json.load(results_json)
        return self._parse_results(results_raw)

    def _run_kunit(self, src_path, command, job_log):
        cmd = f"""(\
set -e
cd {src_path}
./tools/testing/kunit/kunit.py {command} >> {job_log} 2>&1
)"""
        ret = subprocess.run(cmd, shell=True).returncode
        return ret == 0

    def _upload_artifacts(self, local_artifacts):
        artifacts = {}
        storage = self._get_storage()
        if storage and self._node:
            root_path = '-'.join([JOB_NAME, self._node['id']])
            print(f"Uploading artifacts to {root_path}")
            for file_name, file_path in local_artifacts.items():
                # Normalize field names
                file_name = file_name.replace('.', '_')
                if os.path.exists(file_path):
                    file_url = storage.upload_single(
                        (file_path, file_name), root_path
                    )
                    print(file_url)
                    artifacts[file_name] = file_url
        return artifacts

    def _run(self, src_path):
        job_log = 'job.txt'
        kunit_json = 'kunit.json'
        job_log_path, kunit_json_path = (
            os.path.join(src_path, file_name)
            for file_name in [job_log, kunit_json]
        )
        local_artifacts = {
            job_log: job_log_path,
            kunit_json: kunit_json_path,
            'test.log': os.path.join(src_path, '.kunit/test.log')
        }

        if os.path.exists(job_log_path):
            os.remove(job_log_path)

        arch_arg = f'--arch={ARCH}' if ARCH else ''
        steps = {
            'config': f'config {arch_arg}',
            'build': f'build --jobs=$(nproc) {arch_arg}',
            'exec': f'exec --json={kunit_json} {arch_arg}',
        }
        step_results = {name: (None, []) for name in steps.keys()}

        for name, command in steps.items():
            res = self._run_kunit(src_path, command, job_log)
            res_str = 'pass' if res is True else 'fail'
            step_results[name] = (res_str, [])
            if res is False:
                break

        artifacts = self._upload_artifacts(local_artifacts)

        if os.path.exists(job_log_path):
            with open(job_log_path, encoding='utf-8') as job_log_file:
                print("--------------------------------------------------")
                print(job_log_file.read())
                print("--------------------------------------------------")

        if os.path.exists(kunit_json_path):
            exec_results = self._parse_exec_results(kunit_json_path)
            step_results['exec'] = ('pass', exec_results['child_nodes'])

        results = {
            'node': {
                'result': step_results['exec'][0] or 'fail',
                'artifacts': artifacts,
                'data': {'arch': ARCH if ARCH else 'um'}
            },
            'child_nodes': [
                {
                    'node': {
                        'kind': 'job' if child_nodes else 'test' ,
                        'name': name,
                        'result': result,
                    },
                    'child_nodes': child_nodes,
                } for name, (result, child_nodes) in step_results.items()
            ]
        }

        return results

    def _submit(self, result):
        # Ensure top-level name is kept the same
        result = result.copy()
        result['node']['name'] = self._node['name']
        api_helper = kernelci.api.helper.APIHelper(self._api)
        api_helper.submit_results(result, self._node)

{% endblock %}
