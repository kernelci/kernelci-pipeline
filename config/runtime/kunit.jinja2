{# -*- mode: Python -*- -#}
{# SPDX-License-Identifier: LGPL-2.1-or-later -#}

{%- extends 'base/python.jinja2' %}

{%- block python_imports %}
{{ super() }}
import json
import subprocess
{%- endblock %}

{%- block python_local_imports %}
{{ super() }}
import kernelci.api.helper
{%- endblock %}

{%- block python_globals %}
{{ super() }}
RESULT_MAP = {
    'PASS': 'pass',
    'FAIL': 'fail',
    'SKIP': None,
}
{% endblock %}

{% block python_job -%}
class Job(BaseJob):
    def _parse_results(self, group):
        node = {
            'name': group['name'],
        }
        child_nodes = []
        for test_case in group.get('test_cases', []):
            child_nodes.append({
                'node': {
                    'name': test_case['name'],
                    'result': RESULT_MAP[test_case['status']],
                },
                'child_nodes': [],
            })
        for sub_group in group.get('sub_groups', []):
            child_nodes.append(self._parse_results(sub_group))
        return {
            'node': node,
            'child_nodes': child_nodes,
        }

    def _parse_exec_results(self, src_path, kunit_json):
        kunit_json_path = os.path.join(src_path, kunit_json)
        print(f"Parsing results from {kunit_json_path}")
        with open(kunit_json_path) as results_json:
            results_raw = json.load(results_json)
        results = self._parse_results(results_raw)
        return results

    def _run_kunit(self, src_path, kunit_json, command):
        cmd = f"(cd {src_path} && ./tools/testing/kunit/kunit.py {command})"
        ret = subprocess.run(cmd, shell=True).returncode
        return True if ret == 0 else False

    def _run(self, src_path):
        kunit_json = 'kunit.json'
        steps = {
            'config': 'config',
            'build': 'build --jobs=$(nproc)',
            'exec': f'exec --json={kunit_json}',
        }
        step_results = {name: (None, []) for name in steps.keys()}

        for name, command in steps.items():
            res = self._run_kunit(src_path, kunit_json, command)
            res_str = 'pass' if res is True else 'fail'
            step_results[name] = (res_str, [])
            if res is False:
                break

        if step_results['exec'][0] == 'pass':
            exec_results = self._parse_exec_results(src_path, kunit_json)
            step_results['exec'] = ('pass', exec_results['child_nodes'])

        results = {
            'node': {
                'result': step_results['exec'][0] or 'fail',
            },
            'child_nodes': [
                {
                    'node': {
                        'name': name,
                        'result': result,
                    },
                    'child_nodes': child_nodes,
                } for name, (result, child_nodes) in step_results.items()
            ]
        }

        # ToDo: send {src_path}/.kunit/test.log as artifact
        # ToDo: send {src_path}/kunit.json as artifact

        return results

    def _submit(self, result, node_id, api):
        # Ensure top-level name is kept the same
        node = api.get_node(node_id)
        result['node']['name'] = node['name']
        api_helper = kernelci.api.helper.APIHelper(api)
        api_helper.submit_results(result, node)

        return node
{% endblock %}
